use anyhow::bail;
use esp_idf_svc::hal::prelude::Peripherals;
use esp_idf_svc::http::server::Configuration;
use esp_idf_svc::http::Method;
use esp_idf_svc::io::EspIOError;
use esp_idf_svc::log::EspLogger;
use esp_idf_svc::{eventloop::EspSystemEventLoop, http::server::EspHttpServer};
use rgb_led::{RGB8, WS2812RMT};
use wifi::wifi;

/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

/// Entry point to our application.
///
/// It sets up a Wi-Fi connection to the Access Point given in the
/// configuration, then blinks the RGB LED green/blue.
///
/// If the LED goes solid red, then it was unable to connect to your Wi-Fi
/// network.
fn main() -> anyhow::Result<()> {
    esp_idf_svc::sys::link_patches();
    EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    log::info!("rgb: init led!");
    // Start the LED off yellow
    let mut led = WS2812RMT::new(peripherals.pins.gpio21, peripherals.rmt.channel0)?;
    led.set_pixel(RGB8::new(50, 50, 0))?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = &CONFIG;
    log::info!("wifi: {}-{}", app_config.wifi_ssid, app_config.wifi_psk);
    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => inner,
        Err(err) => {
            // Red!
            led.set_pixel(RGB8::new(50, 0, 0))?;
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    let mut http_server = EspHttpServer::new(&Configuration::default())?;

    http_server.fn_handler("/wifi", Method::Get, |req| -> Result<(), EspIOError> {
        let mut resp = req.into_ok_response()?;
        resp.write("hello".as_bytes())?;
        Ok(())
    })?;

    loop {
        log::info!("Hello, world!");
        // Blue!
        led.set_pixel(RGB8::new(0, 0, 50))?;
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
        // Green!
        led.set_pixel(RGB8::new(0, 50, 0))?;
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
        // Red!
        led.set_pixel(RGB8::new(50, 0, 0))?;
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
    }
}
